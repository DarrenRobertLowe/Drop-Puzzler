<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get_grid_info(); // sets vars

// Initialize
global.somethingChanged = true;
global.chain    = 0;
global.dropID   = 0;
prevDropID      = -1;
global.waiting  = false;

updateInterval = global.updateInterval*3;

victory         = false;
explodeThread   = ds_list_create();
//waitTime        = 0;   // updateInterval;
finishedFalling = false;


// shaking
shaked          = false;
shaking         = 0;
shakeDirection  = -1;
shakeCount      = 0;
maxShakeCount   = round(room_speed * .25);
shakeTime       = room_speed;
maxShakeDistance= 8;
shakeDistance   = maxShakeDistance;
shakeFriction   = 1;

// drawing
alphaToggle     = 0;
alpha           = 1;
alphaSpeed      = 1/(room_speed*5);


//event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// call falling check and global.waiting = 0

show_debug_message("running alarm 9");
global.waiting = false
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// game win check and shaking animation
if (instance_number(BLOCK) == 0)
{
    show_message("YOU WIN!");
}

if (shaking &gt; 0)
{
    shaked = true;
    shaking--;
    shakeCount--;
    if (shakeCount &lt;= 0)
    {
        shakeDirection = -shakeDirection;
        shakeCount = 1;//maxShakeCount;
    }
    
    // right
    if (shakeDirection == 1)
    then with (OBJECT)
    {
        x += other.shakeDistance;
    }
    
    // left
    if (shakeDirection == -1)
    then with (OBJECT)
    {
        x -= other.shakeDistance;
    }
    
    shakeDistance -= shakeFriction;
    if (shakeDistance &lt; 0) then shakeDistance = 0;
}

if  (shaked == true)
and (shaking &lt;= 0)
{
    // RESET FOR NEXT TIME
    shaking         = 0;
    shakeCount      = 0;
    shakeDirection  = -1;
    shakeDistance   = maxShakeDistance;
    
    with (OBJECT)
    {
        x = get_x_from_column(column);
        x += xoffset;
    }
    
    shaked = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// explode stuff
show_debug_message("running event 3 - exploding");

// setup chaining
var chained = false;
dropID = global.dropID;
if (dropID == prevDropID)
{
    global.chain++;
    chained = true;
}

// EXPLODE all in explodeList
var list = global.explodeList;
var size = ds_list_size(list);

for(var i=0; i&lt;size; i++)
{
    var item = ds_list_find_value(list,i);
    
    if (chained == true)
    {
        instance_create(item.x, item.y, gfx_chain);
        chained = false;
    }
    
    with (item)
    {        
        alarm[1] = 1; // trigger self destruct
    }
}

// clear the list
ds_list_clear(global.explodeList);

prevDropID  = dropID;
finishedFalling = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for explodes
if (ds_list_size(global.gfx_fallingList) == 0)//(passed == true)
{
    show_debug_message("running event 2 - checking for explodes");
    
    ds_list_clear(global.explodeList);
    
    check_for_horizontal_explodes();
    check_for_vertical_explodes();
    check_for_adjacent_explodes();
    
    if ( ds_list_size(global.explodeList) &gt; 0 )
    {
        event_user(3); // explode!
    }
    else
    {
        finishedFalling = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move objects down
show_debug_message("running event 1 - falling");


var list = global.fallingList;
var size = ds_list_size(list);

for (var i=0; i&lt;(size); i++)
{
    var item = ds_list_find_value(list, i);
    
    if exists(item)
    {
        var column = item.column;
        var row    = item.row;
        fall_object(item, column, row);
    }
    else
    {
        show_debug_message("item "+string(item) +" was not found to exist, removing from fallingList");
        list_remove_item(list,item);
    }
}

// repeat game logic
alarm[9] = (1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if objects should fall
show_debug_message("running event 0 - checking for falls");
ds_list_clear(global.fallingList);


    for(var row=(lastRow); (row&gt;-1); row--)                // go backwards through rows
    {
        for(var column=(lastColumn); (column&gt;-1); column--)    // go backwards through columns
        {
            var item = -1;
            
            // keep in bounds
            if  (column &gt; -1)
            and (row &gt; -1)
              then item = ds_grid_get(grid, column, row);
            
            // if exists...
            if exists(item)
            {
                if (item.falls == true)
                {
                    with (item)
                    {
                        var targetRow = get_max_row(column,row,item);//(row + 1);
                        
                        if  (targetRow &gt; 0)
                        and (targetRow &lt;= lastRow)
                        and (ds_list_find_index(global.fallingList, id) == -1)
                        {
                            var val = ds_grid_get(grid, column, targetRow);
                            if (val == 0)
                            {
                                list_add_exclusive(global.fallingList, item);
                            }
                        }
                    }
                }
            }
        }
    }

if (ds_list_size(global.fallingList) &gt; 0)
  then event_user(1); // make objects fall
  else event_user(2); // check for explodes
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG
/*
var grid        = global.grid;
var gridHeight  = global.gridHeight;
var gridWidth   = global.gridWidth;
var yy          = 30;
var sep         = 25;

for(var r=0; r&lt;gridHeight; r++)
{
    for(var c=0; c&lt;gridWidth; c++)
    {
        var val = ds_grid_get(grid,c,r);
        
        if (val &gt; 0) then val = val.object_index;
        
        draw_text(c*sep, yy+(r*sep), val);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw background

// draw bg color
background_color = make_color_rgb(0, 40, 0); // dark red


// draw checkerboard
var dkblue = make_color_rgb(0, 70, 0);
draw_set_color(dkblue);

for(var r=0; r&lt;gridHeight; r++)
{
    for(var c=0; c&lt;gridWidth; c+=2)
    {
        var offset = 0;
        if ( (r mod 2) == 0 )
          then offset = 1;

        var x1 = ( gridStartX + ( (c + offset) * cellWidth)  );
        var y1 = ( gridStartY + (r  * cellHeight) );
        var x2 = ( x1 + cellWidth );
        var y2 = ( y1 + cellHeight );
        
        draw_rectangle(x1, y1, x2, y2, false);
    }
}


// draw grid lines 1
if (alpha &lt;= 0) then alphaToggle = 1;
if (alpha &gt;= 1) then alphaToggle = 0;

if   (alphaToggle == 0)
then alpha -= alphaSpeed;

if   (alphaToggle == 1)
then alpha += alphaSpeed;

draw_set_alpha(alpha);
draw_set_color(make_color_rgb(0,175,0));

for(var xx=0; xx&lt;gridWidth; xx++)
{
    // draw horizontal lines
    for(var yy=0; yy&lt;gridHeight; yy++)
    {
        draw_line( gridStartX, gridStartY+(yy*cellHeight), gridEndX, gridStartY+(yy*cellHeight) );
    }
    
    // draw vertical
    draw_line( xx*cellWidth, gridStartY, xx*cellWidth, gridEndY );
}



// draw grid lines 2
//draw_set_blend_mode_ext(bm_inv_src_color, bm_src_alpha);


draw_set_alpha(.1);
draw_set_color(make_color_rgb(10,10,10));


for(var xx=0; xx &lt; gridPixelWidth; xx += 8)
{
    // draw horizontal lines
    for(var yy=0; yy&lt; gridPixelHeight; yy += 8)
    {
        draw_line( gridStartX, gridStartY+yy, gridEndX, gridStartY+yy );
    }
    
    // draw vertical
    draw_line( xx, gridStartY, xx, gridEndY );
}

// clean up
draw_set_blend_mode(bm_normal);
reset_drawing();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
