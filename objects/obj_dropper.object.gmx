<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dropper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize
image_speed = 0;
get_grid_info();    // sets the grid vars
dropDelay = room_speed; // how long it takes to load a new block

// set position
row      = 0;
column   = (gridWidth div 2);
newBlock = -1;
x = get_x_from_column(column);
y = get_y_from_row(row);

// create the first block
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset image
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create playerBlock
blockVal = irandom(3);

playerBlock = spawn(grid, column, row, obj_playerBlock);

if (blockVal == 0) then playerBlock.sprite_index = spr_block_blue;
if (blockVal == 1) then playerBlock.sprite_index = spr_block_green;
if (blockVal == 2) then playerBlock.sprite_index = spr_block_red;
if (blockVal == 3) then playerBlock.sprite_index = spr_block_yellow;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
var c = column;
var r = row;

if  (playerBlock != -1) // is there a block ready to drop?
{
    if ( keyboard_check_released(vk_left) )
    {
        var targetCol = (c - 1);
        if (targetCol &gt; -1)
        {
            ds_grid_set(grid, targetCol, r, playerBlock);
            ds_grid_set(grid, c, r, 0)      // clear old grid space
            column = targetCol;
            x = get_x_from_column(column);
            playerBlock.x = x;
            playerBlock.column = column;
            
            with (playerBlock)
            {
                //alarm[0] = 1;
            }
        }
        else targetCol = c;
    }
    
    if ( keyboard_check_released(vk_right) )
    {
        var targetCol = (c + 1);
        if (targetCol &lt; gridWidth)
        {
            ds_grid_set(grid, targetCol, r, playerBlock);
            ds_grid_set(grid, c, r, 0)      // clear old grid space
            column = targetCol;
            x = get_x_from_column(column);
            playerBlock.x = x;
            playerBlock.column = column;
            
            with (playerBlock)
            {
                //alarm[0] = 1;
            }
        }
        else targetCol = c;
    }
    
    
    // drop a block
    if ( keyboard_check_pressed(vk_down) )
    {
        if  ( playerBlock != -1 )                    // is there a block ready to drop?
        and (ds_list_size(global.fallingList) == 0)
        and (ds_list_size(global.gfx_fallingList) == 0)
        and (global.waiting == false)
        {
            if (ds_grid_get(grid, column, row) == 0)
            or (ds_grid_get(grid, column, row) != id)
            {
                // change sprite
                image_index = 1;
                alarm[2] = room_speed;
                
                // drop block
                if ( exists(newBlock) )                 // if newBlock exists already
                {
                    if ( newBlock.falling == false )    // and the current block has finished falling
                    {
                        drop_new_block();
                    }
                }
                else // newBlock doesn't yet exist
                {
                    drop_new_block();
                }
            }
            else // there's something in our place, it's game over, man!
            {
                show_message("GAME OVER!");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw self and drop guides

draw_self();

var preDepth = depth;

// draw guide beam
depth = 100;
draw_set_blend_mode_ext(bm_src_alpha, bm_dest_color);
/// MAKE THIS BEAM COLOUR THE COLOUR OF THE BRICK BEING DROPPED
draw_set_color(c_white);
draw_set_alpha(0.5);
draw_rectangle(x,y,x+cellWidth,gridEndY,false);

draw_line(x, y, x, gridEndY);                       // left line
draw_line(x+cellWidth, y, x+cellWidth, gridEndY);   // right line


// reset
draw_set_blend_mode(bm_normal);
depth = preDepth;
reset_drawing();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
